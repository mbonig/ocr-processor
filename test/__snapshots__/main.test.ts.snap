// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "Bucket83908E77": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Status": "Enabled",
              "Transitions": [
                {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 30,
                },
              ],
            },
          ],
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
        "Tags": [
          {
            "Key": "application",
            "Value": "ocr",
          },
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true",
          },
        ],
        "VersioningConfiguration": {
          "Status": "Enabled",
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Delete",
    },
    "BucketAutoDeleteObjectsCustomResourceBAFD23C2": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "BucketPolicyE9A3008A",
      ],
      "Properties": {
        "BucketName": {
          "Ref": "Bucket83908E77",
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3AutoDeleteObjects",
      "UpdateReplacePolicy": "Delete",
    },
    "BucketNotifications8F2E257D": {
      "Properties": {
        "BucketName": {
          "Ref": "Bucket83908E77",
        },
        "Managed": true,
        "NotificationConfiguration": {
          "EventBridgeConfiguration": {},
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn",
          ],
        },
      },
      "Type": "Custom::S3BucketNotifications",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "import boto3  # type: ignore
import json
import logging
import urllib.request

s3 = boto3.client("s3")

EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

def handler(event: dict, context):
  response_status = "SUCCESS"
  error_message = ""
  try:
    props = event["ResourceProperties"]
    notification_configuration = props["NotificationConfiguration"]
    managed = props.get('Managed', 'true').lower() == 'true'
    stack_id = event['StackId']
    old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
    if managed:
      config = handle_managed(event["RequestType"], notification_configuration)
    else:
      config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
    s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config)
  except Exception as e:
    logging.exception("Failed to put bucket notification configuration")
    response_status = "FAILED"
    error_message = f"Error: {str(e)}. "
  finally:
    submit_response(event, context, response_status, error_message)

def handle_managed(request_type, notification_configuration):
  if request_type == 'Delete':
    return {}
  return notification_configuration

def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
  def with_id(n):
    n['Id'] = f"{stack_id}-{hash(json.dumps(n, sort_keys=True))}"
    return n

  external_notifications = {}
  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
  for t in CONFIGURATION_TYPES:
    if request_type == 'Update':
        ids = [with_id(n) for n in old.get(t, [])]
        old_incoming_ids = [n['Id'] for n in ids]
        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'] in old_incoming_ids]
    elif request_type == 'Create':
        external_notifications[t] = [n for n in existing_notifications.get(t, [])]
  if EVENTBRIDGE_CONFIGURATION in existing_notifications:
    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

  if request_type == 'Delete':
    return external_notifications

  notifications = {}
  for t in CONFIGURATION_TYPES:
    external = external_notifications.get(t, [])
    incoming = [with_id(n) for n in notification_configuration.get(t, [])]
    notifications[t] = external + incoming

  if EVENTBRIDGE_CONFIGURATION in notification_configuration:
    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
  elif EVENTBRIDGE_CONFIGURATION in external_notifications:
    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

  return notifications

def submit_response(event: dict, context, response_status: str, error_message: str):
  response_body = json.dumps(
    {
      "Status": response_status,
      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
      "StackId": event["StackId"],
      "RequestId": event["RequestId"],
      "LogicalResourceId": event["LogicalResourceId"],
      "NoEcho": False,
    }
  ).encode("utf-8")
  headers = {"content-type": "", "content-length": str(len(response_body))}
  try:
    req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
    with urllib.request.urlopen(req) as response:
      print(response.read().decode("utf-8"))
    print("Status code: " + response.reason)
  except Exception as e:
      print("send(..) failed executing request.urlopen(..): " + str(e))
",
        },
        "Description": "AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Tags": [
          {
            "Key": "application",
            "Value": "ocr",
          },
        ],
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "application",
            "Value": "ocr",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "BucketPolicyE9A3008A": {
      "Properties": {
        "Bucket": {
          "Ref": "Bucket83908E77",
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false",
                },
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*",
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn",
                  ],
                },
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:PutObject",
              "Condition": {
                "StringEquals": {
                  "aws:Referer": {
                    "Ref": "AWS::AccountId",
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "ses.amazonaws.com",
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "Bucket83908E77",
                        "Arn",
                      ],
                    },
                    "/raw*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::S3::BucketPolicy",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
      "DependsOn": [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6.zip",
        },
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting objects in ",
              {
                "Ref": "Bucket83908E77",
              },
              " S3 bucket.",
            ],
          ],
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:\${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "EmailParserDeadLetterQueue0BE070BB": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "Tags": [
          {
            "Key": "application",
            "Value": "ocr",
          },
        ],
      },
      "Type": "AWS::SQS::Queue",
      "UpdateReplacePolicy": "Delete",
    },
    "EmailParserEmailParserErrorAlarm7DC638EB": {
      "Properties": {
        "ActionsEnabled": true,
        "AlarmActions": [
          {
            "Ref": "NotificationTopicEB7A0DF1",
          },
        ],
        "AlarmDescription": "Email Parser Error Alarm",
        "AlarmName": "EmailParserErrorAlarm",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "EmailParserFA9B67AD",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 1,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "EmailParserEventInvokeConfig0E511273": {
      "Properties": {
        "DestinationConfig": {
          "OnFailure": {
            "Destination": {
              "Fn::GetAtt": [
                "EmailParserDeadLetterQueue0BE070BB",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": {
          "Ref": "EmailParserFA9B67AD",
        },
        "Qualifier": "$LATEST",
      },
      "Type": "AWS::Lambda::EventInvokeConfig",
    },
    "EmailParserFA9B67AD": {
      "DependsOn": [
        "EmailParserServiceRoleDefaultPolicy9CE15748",
        "EmailParserServiceRole21B0E163",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "my-bucket",
          "S3Key": "my-key",
        },
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "BUCKET": {
              "Ref": "Bucket83908E77",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "EmailParserServiceRole21B0E163",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Tags": [
          {
            "Key": "application",
            "Value": "ocr",
          },
        ],
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "EmailParserParseRawEmailRuleAllowEventRuletestEmailParserCDAED8A8B5920BE0": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "EmailParserFA9B67AD",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "EmailParserParseRawEmailRuleD1B3474C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "EmailParserParseRawEmailRuleD1B3474C": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "bucket": {
              "name": [
                {
                  "Ref": "Bucket83908E77",
                },
              ],
            },
            "object": {
              "key": [
                {
                  "prefix": "raw",
                },
              ],
            },
          },
          "detail-type": [
            "Object Created",
          ],
          "source": [
            "aws.s3",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "EmailParserFA9B67AD",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "EmailParserServiceRole21B0E163": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "application",
            "Value": "ocr",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "EmailParserServiceRoleDefaultPolicy9CE15748": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sqs:SendMessage",
                "sqs:GetQueueAttributes",
                "sqs:GetQueueUrl",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "EmailParserDeadLetterQueue0BE070BB",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/raw/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/images/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "EmailParserServiceRoleDefaultPolicy9CE15748",
        "Roles": [
          {
            "Ref": "EmailParserServiceRole21B0E163",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ImageScanner47365A56": {
      "DependsOn": [
        "ImageScannerServiceRoleDefaultPolicy5E587F0E",
        "ImageScannerServiceRoleA2667AE7",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": "my-bucket",
          "S3Key": "my-key",
        },
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "BUCKET_NAME": {
              "Ref": "Bucket83908E77",
            },
          },
        },
        "Handler": "index.handler",
        "MemorySize": 256,
        "Role": {
          "Fn::GetAtt": [
            "ImageScannerServiceRoleA2667AE7",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Tags": [
          {
            "Key": "application",
            "Value": "ocr",
          },
        ],
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ImageScannerEmailParserErrorAlarm833AA657": {
      "Properties": {
        "ActionsEnabled": true,
        "AlarmActions": [
          {
            "Ref": "NotificationTopicEB7A0DF1",
          },
        ],
        "AlarmDescription": "Image Scanner Error Alarm",
        "AlarmName": "ImageScannerErrorAlarm",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "Dimensions": [
          {
            "Name": "FunctionName",
            "Value": {
              "Ref": "ImageScanner47365A56",
            },
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "Errors",
        "Namespace": "AWS/Lambda",
        "Period": 300,
        "Statistic": "Sum",
        "Threshold": 1,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "ImageScannerScanImageRuleAllowEventRuletestImageScanner26CBF8E380B13B8B": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ImageScanner47365A56",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "ImageScannerScanImageRuleB9AB1ABC",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ImageScannerScanImageRuleB9AB1ABC": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "bucket": {
              "name": [
                {
                  "Ref": "Bucket83908E77",
                },
              ],
            },
            "object": {
              "key": [
                {
                  "prefix": "images",
                },
              ],
            },
          },
          "detail-type": [
            "Object Created",
          ],
          "source": [
            "aws.s3",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "ImageScanner47365A56",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "ImageScannerServiceRoleA2667AE7": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "application",
            "Value": "ocr",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ImageScannerServiceRoleDefaultPolicy5E587F0E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "Bucket83908E77",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "Bucket83908E77",
                          "Arn",
                        ],
                      },
                      "/images/*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "textract:AnalyzeDocument",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "ses:SendRawEmail",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ImageScannerServiceRoleDefaultPolicy5E587F0E",
        "Roles": [
          {
            "Ref": "ImageScannerServiceRoleA2667AE7",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "IncomingEmailC13CBC4C": {
      "Properties": {
        "RuleSetName": "OcrNotesProcessor",
      },
      "Type": "AWS::SES::ReceiptRuleSet",
    },
    "IncomingEmailRule0044996F1": {
      "DependsOn": [
        "BucketPolicyE9A3008A",
      ],
      "Properties": {
        "Rule": {
          "Actions": [
            {
              "S3Action": {
                "BucketName": {
                  "Ref": "Bucket83908E77",
                },
                "ObjectKeyPrefix": "raw",
                "TopicArn": {
                  "Ref": "IncomingEmailTopic52A71519",
                },
              },
            },
          ],
          "Enabled": true,
          "Recipients": [
            "notes@ocr.matthewbonig.com",
          ],
        },
        "RuleSetName": {
          "Ref": "IncomingEmailC13CBC4C",
        },
      },
      "Type": "AWS::SES::ReceiptRule",
    },
    "IncomingEmailTopic52A71519": {
      "Properties": {
        "Tags": [
          {
            "Key": "application",
            "Value": "ocr",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "NotificationTopicEB7A0DF1": {
      "Properties": {
        "Tags": [
          {
            "Key": "application",
            "Value": "ocr",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "NotificationTopicmatthewboniggmailcom427F7535": {
      "Properties": {
        "Endpoint": "matthew.bonig@gmail.com",
        "Protocol": "email",
        "TopicArn": {
          "Ref": "NotificationTopicEB7A0DF1",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
